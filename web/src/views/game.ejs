<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>GeekIT Dice Game</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css" integrity="sha512-SnH5WK+bZxgPHs44uWIX+LLJAJ9/2PkPKZ5QiAj6Ta86w+fsb2TkcmfRyVX3pBnMFcV7oQPJkl9QevSCWr3W6A==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <style>
      .dice {
        height: 6rem;
        width: 6rem;
        border-radius: 0.5rem;
        --tw-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);
        --tw-shadow-colored: 0 10px 15px -3px var(--tw-shadow-color), 0 4px 6px -4px var(--tw-shadow-color);
        box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);
        transition-property: transform;
        transition-duration: 300ms;
        transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
      }

      .dice:hover {
        --tw-scale-x: 1.1;
        --tw-scale-y: 1.1;
        transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));
      }

      .hover\:bg-blue-700:hover {
        --tw-bg-opacity: 1;
        background-color: rgb(29 78 216 / var(--tw-bg-opacity));
      }

      .hover\:bg-gray-200:hover {
        --tw-bg-opacity: 1;
        background-color: rgb(229 231 235 / var(--tw-bg-opacity));
      }

      .hover\:underline:hover {
        text-decoration-line: underline;
      }
    </style>
</head>
<body class="bg-gray-100 font-sans">

  <nav class="bg-white dark:bg-gray-900 fixed w-full z-20 top-0 start-0 border-b border-gray-200 dark:border-gray-600">
    <div class="max-w-screen-xl flex flex-wrap items-center justify-between mx-auto p-4">
      <a href="/" class="flex items-center space-x-3 rtl:space-x-reverse">
          <span class="self-center text-2xl font-semibold whitespace-nowrap dark:text-white">GeekIT Game</span>
      </a>
      <div class="flex md:order-2 space-x-3 md:space-x-0 rtl:space-x-reverse">
          <a href="http://localhost:5000/configuration/<%= configuration.id %>?sessionId=<%= sessionId %>&creatorId=<%= user.id %>"  class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-4 py-2 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800 mr-3">
            <i class="fa-solid fa-gear mr-2"></i>
            Configuration
          </a>
          <button onclick="onEndSessionBtnClicked()" type="button" id="end-session-button" class="text-white bg-red-700 hover:bg-red-800 focus:ring-4 focus:outline-none focus:ring-red-300 font-medium rounded-lg text-sm px-4 py-2 text-center dark:bg-red-600 dark:hover:bg-red-700 dark:focus:ring-red-800">
            <i class="fa-solid fa-arrow-right-from-bracket mr-2"></i>
            Quitter la session
          </button>
          <button data-collapse-toggle="navbar-sticky" type="button" class="inline-flex items-center p-2 w-10 h-10 justify-center text-sm text-gray-500 rounded-lg md:hidden hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 dark:text-gray-400 dark:hover:bg-gray-700 dark:focus:ring-gray-600" aria-controls="navbar-sticky" aria-expanded="false">
            <span class="sr-only">Open main menu</span>
            <svg class="w-5 h-5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 17 14">
                <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M1 1h15M1 7h15M1 13h15"/>
            </svg>
          </button>
      </div>
    </div>
  </nav>

  <main class="container mx-auto mt-10 p-4">
    <h1 class="text-3xl font-bold mt-10 mb-8 text-center">Jeu de lancé de dé</h1>

    <div class="grid grid-cols-12 gaps-4 mt-10">
      <!-- Colonne gauche: Informations du joueur courant -->

      <div class="col-span-3 bg-white rounded-lg shadow-lg p-6">
        <h2 class="text-2xl font-bold mb-4">Joueurs</h2>
        <div id="playerList">
          <!-- Les joueurs seront ajoutés ici dynamiquement -->
        </div>
      </div>

      <!-- Colonne centrale: Jeu de lancé de dé -->
      <div class="col-span-9">
        <div class="max-w-2xl mx-auto">
          <div class="bg-white rounded-lg shadow-lg p-8">
            <h3 class="text-xl font-bold mb-4">Tour du joueur: <span id="currentPlayerName"></span></h3>
            <div class="flex justify-center mb-8">
              <% for(let i = 0; i < configuration.diceCount; i++) { %>
                <img src="/images/dice-1.png" alt="Dice" class="dice mx-2" id="dice<%= i %>">
              <% } %>
            </div>
            <div class="text-center">
              <button id="rollButton" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded transition duration-300">
                Lancer les dés
              </button>
            </div>
            <div id="result" class="mt-8 text-center text-2xl font-bold"></div>
          </div>
        </div>
      </div>
    </div>
    </div>

    <div id="modal-dialog" class="relative z-10 hidden" aria-labelledby="modal-title" role="dialog" aria-modal="true">

      <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" aria-hidden="true"></div>
    
      <div class="fixed inset-0 z-10 w-screen overflow-y-auto">
        <div class="flex min-h-full items-end justify-center p-4 text-center sm:items-center sm:p-0">

          <div class="relative transform overflow-hidden rounded-lg bg-white text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-lg">
            <div class="bg-white px-4 pb-4 pt-5 sm:p-6 sm:pb-4">
              <div class="sm:flex sm:items-start">
                <div class="mx-auto flex h-12 w-12 flex-shrink-0 items-center justify-center rounded-full bg-red-100 sm:mx-0 sm:h-10 sm:w-10">
                  <svg class="h-6 w-6 text-red-600" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126zM12 15.75h.007v.008H12v-.008z" />
                  </svg>
                </div>
                <div class="mt-3 text-center sm:ml-4 sm:mt-0 sm:text-left">
                  <h3 class="text-base font-semibold leading-6 text-gray-900" id="modal-title">Quitter la session de jeu</h3>
                  <div class="mt-2">
                    <p class="text-sm text-gray-500">Êtes-vous sur de vouloir arrêter la session en cours ?</p>
                  </div>
                </div>
              </div>
            </div>
            <div class="bg-gray-50 px-4 py-3 sm:flex sm:flex-row-reverse sm:px-6">
              <button onclick="cancelAction()" type="button" class="inline-flex w-full justify-center rounded-md bg-red-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-red-500 sm:ml-3 sm:w-auto">Nom</button>
              <button id="end-session-button-confirm" type="button" class="mt-3 inline-flex w-full justify-center rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50 sm:mt-0 sm:w-auto">Oui</button>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div id="popup-limit-dialog" class="relative z-10 hidden" aria-labelledby="modal-title" role="dialog" aria-modal="true">

      <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" aria-hidden="true"></div>
    
      <div class="fixed inset-0 z-10 w-screen overflow-y-auto">
        <div class="flex min-h-full items-end justify-center p-4 text-center sm:items-center sm:p-0">

          <div class="relative transform overflow-hidden rounded-lg bg-white text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-lg">
            <div class="bg-white px-4 pb-4 pt-5 sm:p-6 sm:pb-4">
              <div class="sm:flex sm:items-start">
                <div class="mt-3 text-center sm:ml-4 sm:mt-0 sm:text-left">
                  <h1 class="text-base font-semibold leading-6 text-gray-900" id="modal-title">Fin du Jeu!</h1>
                  <div class="mt-2">
                    <h2 class="text-sm text-gray-500" id="final-result"></h2>
                  </div>
                </div>
              </div>
            </div>
            <div class="bg-gray-50 px-4 py-3 sm:flex sm:flex-row-reverse sm:px-6">
              <button onclick="closeLimitGamePopup()" type="button" class="inline-flex w-full justify-center rounded-md bg-blue-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-blue-500 sm:ml-3 sm:w-auto">Nom</button>
              <button onclick="onStartNewSessionButtonClicked()" id="start-new-session-button" type="button" class="mt-3 inline-flex w-full justify-center rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50 sm:mt-0 sm:w-auto">Oui</button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </main>

  <script>
    var sessionId = '<%= sessionId %>';
    var numDice = '<%= configuration.diceCount %>';
    var numGame = '<%= configuration.gameCount %>';
    let players = JSON.parse('<%- players %>');
    var currentPlayerIndex = 0;


    const endSessionButton = document.getElementById('end-session-button-confirm')
    const startNewSessionButton = document.getElementById('start-new-session-button');
    const rollButton = document.getElementById('rollButton');
    const result = document.getElementById('result');
    const endGamePopupContent = document.getElementById('final-result');
    const playerScore = document.getElementById('playerScore')
    const gamesPlayed = document.getElementById('gamesPlayed')

    const playerList = document.getElementById('playerList');
    const currentPlayerName = document.getElementById('currentPlayerName');

    let dice = []

    for (let i = 0; i<numDice ; i++){
      dice.push(document.getElementById(`dice${i}`))
    }


    
    if (rollButton) {
      rollButton.addEventListener('click', () => {
        const currentPlayer = players[currentPlayerIndex];
        
        if ((numGame > 0 && currentPlayer.gamesPlayed < numGame) || numGame == 0) {
          rollButton.disabled = true;
          let rolls = [];

          dice.forEach((die, index) => {
            die.classList.add('animate-spin-slow');
            setTimeout(() => {
              const roll = Math.floor(Math.random() * 6) + 1;
              rolls.push(roll);
              die.src = `/images/dice-${roll}.png`;
              die.classList.remove('animate-spin-slow');

              if (index === dice.length - 1) {
                const total = rolls.reduce((sum, num) => sum + num, 0);
                result.textContent = `${currentPlayer.username} a obtenu un total de ${total}!`;
                currentPlayer.score += total;
                currentPlayer.gamesPlayed += 1;
                saveGame({ playerId: currentPlayer.id, score: total });
                updatePlayerList();
                rollButton.disabled = false;
                
                setTimeout(() => {
                  nextPlayer();
                  if (players.every(player => player.gamesPlayed >= numGame)) {
                    endGame();
                  }
                }, 1000);
              }
            }, 500 * (index + 1));
          });
        }
      });
    }

    function endGame() {
      const winner = players.reduce((prev, current) => (prev.score > current.score) ? prev : current);
      endGamePopupContent.innerText = `Fin du jeu! Le gagnant est ${winner.username} avec un score de ${winner.score}!\n\nSouhaitez-vous démmarer une nouvelle session maintenant?`;
      rollButton.disabled = true;
      document.getElementById('popup-limit-dialog').classList.remove('hidden');
    }

    function cancelAction(){
        document.getElementById("modal-dialog").classList.add("hidden");
    }

    function onEndSessionBtnClicked(){
        document.getElementById("modal-dialog").classList.remove("hidden");
    }

    function closeLimitGamePopup(){
        document.getElementById("popup-limit-dialog").classList.add("hidden");
    }

    async function onStartNewSessionButtonClicked() {
      try {
        const url = `http://localhost:4000/api/sessions/${sessionId}`;
        
        const response = await fetch(url, {
          method: 'PUT',
          headers: {
              'Content-Type': 'application/json'
          },
        });

        console.log(response);

        if (response.ok) {
          startNewSession()
        } else {
            console.error('Error:', response.status, response.statusText);
        }
      } catch (error) {
        console.error('Network error:', error);
      }
    }

    async function endCurrentSession() {
      try {
        const url = `http://localhost:4000/api/sessions/${sessionId}`;
        

        const response = await fetch(url, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
        });

        console.log(response);

        if (response.ok) {
            const result = await response.json();
            console.log('Success:', result);
            window.location.href = '/'
        } else {
            console.error('Error:', response.status, response.statusText);
        }
      } catch (error) {
        console.error('Network error:', error);
      }
    }

    async function startNewSession() {
      try {
        const url = 'http://localhost:4000/api/sessions';
        
        const response = await fetch(url, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
        });

        console.log('Response:', response);
        if (response.ok) {
          const result = await response.json();
          window.location.replace('/game');
        } else {
          console.error('Error:', response.status, response.statusText);
        }
      } catch (error) {
        console.error('Network error:', error);
      }
    }

    endSessionButton.addEventListener('click', async(e) => {
      e.preventDefault();
      await endCurrentSession();
    });

    async function saveGame(data) {
      try {
        const url = 'http://localhost:4000/api/save-game';
          
        const response = await fetch(url, {
          method: 'POST',
          headers: {
              'Content-Type': 'application/json'
          },
          body: JSON.stringify(data)
        });

        console.log(response);

        if (response.ok) {
          const result = await response.json();
          console.log('Success:', result);
        } else {
          console.error('Error:', response.status, response.statusText);
        }
      } catch (error) {
        console.error('Network error:', error);
      }
    }

    function updatePlayerList() {
      playerList.innerHTML = '';
      
      players.forEach((player, index) => {
        const playerDiv = document.createElement('div');
        playerDiv.className = `p-2 mb-2 rounded ${index === currentPlayerIndex ? 'active-player' : ''}`;
        playerDiv.innerHTML = `
          <p><strong>Nom :</strong> <span class="font-bold uppercase">${player.username}</span></p>
          <p><strong>Score Total :</strong> <span class="font-bold">${player.score}</span></p>
          <p><strong>Jeux joués :</strong> <span class="font-bold">${player.gamesPlayed}</span>
            ${numGame > 0 ? `/${numGame}` : ''}
          </p>
        `;
        playerList.appendChild(playerDiv);
      });
      currentPlayerName.textContent = players[currentPlayerIndex].username;
    }

    function nextPlayer() {
      currentPlayerIndex = (currentPlayerIndex + 1) % players.length;
      updatePlayerList();
    }

    function onGameStart() {
      players = players.map(player => {
        player.gamesPlayed = 0;
        player.score = 0;
        return player;
      });
    }
    
    onGameStart();
    updatePlayerList();

    console.log(players)
</script>
</body>
</html>
